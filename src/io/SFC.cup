
/**
 * Grammar (yacc) definition of the syntax of textual sfc's.
 * Offers the methods  parseFile and parseExpression 
 *
 * @author Karsten Stahl, Martin Steffen
 * @version $Id: SFC.cup,v 1.17 2001-07-13 07:18:10 swprakt Exp $
 *
 * The grammar definition contains 4 parts:
 *    -  initialization declarations and how to generate the parser
 *    -  declaration of terminals and non-terminals
 *    -  precedence, associativity
 *    -  grammar proper
 **/



/*  ---- Preliminaries to set up and use the scanner.  ---- */


package io;

import java_cup.runtime.*;
import java.lang.String;
import absynt.*;
import utils.*;
import java.util.*;
import java.io.*;


/**
* The following 4 (optional) entries are for user-code insertions to the generated parser:
*   - init:   executed before start parsing
*   - scan:   how the parser asks for the next token
*   - action: code will be placed in the action class. Used as auxiliary
*             routines usable in the actions of the grammar.
*   - parser: code will be _directly_ placed in the parser class
**/


// init with {: io.scanner.init(); :}; 
// scan with {: return scanner.next_token(); :};  // equivalent to the default


action code {:
  String tab = "";
  /* --- removed  */    int state_counter = 0;

  private LinkedList _steplist = new LinkedList();
  private LinkedList _declist = new LinkedList();
  
  private Step get_step_by_name(String s) {
      absynt.Step _s = null;
      for (Iterator i = _steplist.iterator(); i.hasNext();) {
	  Step _li = (Step) i.next();
	  if (s.equals(_li.name)) _s=_li;
      }
      if (_s == null)
	  System.err.println("not all steps occur in the step list");
      return _s;
  };

  private Variable get_variable_by_name(String vn) {
      absynt.Variable _v = null;
      for (Iterator i = _declist.iterator(); i.hasNext();) {
	  Declaration _li = (Declaration) i.next();
	  if (vn.equals(_li.var.name)) _v=_li.var;
      }
      if (_v == null)
	  System.err.println("not all variables declared");
      return _v;
  };

  private void more(){
    tab = tab + "  ";
  }
  
  private void less(){
    tab = tab.substring(0, tab.length()-2);
  }

  public absynt.ActionQualifier determine_qualifier(String s) {
    /**
     * Gives back the action qualifier. The method allows to avoid to give
     * the qualifiers, which are one-letter strings, the status of lexical keywords.
     */
    return (new absynt.Nqual());
  }
  
  
  :}

parser code {:
  Yylex lexer;

  public void report_fatal_error(String message, Object info) throws ParseException{
    System.err.println(message);
    throw new ParseException(message);
  }
  
  public void report_error(String message, Object info){
    System.err.println("[modul parser2] "+message);
  }
  
  public void syntax_error(Symbol cur_token){
    report_error("Syntax Fehler! aktuelles Symbol: "+cur_token, null);
  }
  
  public void unrecovered_syntax_error(Symbol cur_token) throws ParseException{
    done_parsing();       
    report_fatal_error("[module io] fatal parsing error", null);
  }


   /** 
    * public method to parse a file
    *
    * @parameter 
    * sourcefile - file to parse
    * @return 
    * abstract syntax tree with absynt.sfc as root
    * @throws 
    * java.Exception when broken.
    */
  public absynt.SFC  parseFile(java.io.File sourcefile) throws Exception {
    lexer   = new Yylex(new FileInputStream(sourcefile));
    setScanner(lexer);
    absynt.SFC  sfc = (absynt.SFC)parse().value;
    return sfc;
  }
  
    /**
     * public method to parse a single expression
     *
     * @parameter
     * The string to parse
     * @return 
     * an absynt.Expr*
     * @throws
     * java.Exception when not parseable.
     */
  public absynt.Expr parseExpression(java.lang.String expression) throws Exception {
    lexer = new Yylex(new StringReader(expression));
    setScanner(lexer);
    absynt.Expr expr = (absynt.Expr)parse().value;
    return expr;
  }
  
  //      public static void main(String args[]) throws Exception {
  //          new Parser().parseFile(new File(args[0]));    
  //      //    new Parser().parseExpression(args[0]);
  //      }

  :}


/* ------ Declaration of terminals and non-terminals ----- */
/** 
 * The choice of names for the non-terminals is directly inspired
 * byte the extended abstract grammar.
 */ 
terminal         LBRACKET, RBRACKET, ASSIGN;
terminal         LPAREN, RPAREN,  COMMA, SEM, COLON, FROMTO;  
terminal         INIT, SKIP, WHEN, ACTIONS, BEGIN, END, VARS, STEPS, TRANSITIONS;
terminal         INT, BOOL, NEQ, OR, PLUS, TIMES;
terminal         AND, DIV, EQ, GEQ, GREATER, LEQ, LESS, MINUS, NEG;
terminal         TRUE, FALSE;

terminal String  IDENT;
terminal Integer INTEGER;

non terminal    absynt.SFC        sfc;
non terminal    absynt.SFC        program;
non terminal	absynt.Step	  istep;
non terminal	LinkedList	  steps, steplist, stepnames;
non terminal    absynt.Step       step;
non terminal	LinkedList	  transitions, transitionlist;
non terminal	LinkedList	  declist;
non terminal    absynt.Type       type;
non terminal    absynt.Constval   constval;
non terminal    LinkedList        declarations;
non terminal    Declaration       declaration;
non terminal    LinkedList        stepactionlist;
non terminal    absynt.StepAction stepaction;
non terminal    absynt.ActionQualifier  qualifier;
non terminal    LinkedList              actionlist,actions;
non terminal    absynt.Action           sfcaction;   //action a is reserved word
non terminal    LinkedList              sap, stmtlist;
non terminal    absynt.Stmt             stmt;
non terminal    absynt.Assign           assign;
non terminal    absynt.Transition       transition;

non terminal    absynt.Expr       expr;
non terminal    absynt.Variable   var;
non terminal    Integer           op;    // int does not work! RESULT must be an object


/* ---        precedences and associativity ------- */


precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left AND, OR, NEQ, LESS, LEQ, GREATER, GEQ, EQ;
precedence left NEG;


/* -----      The grammar proper ----------------- */
start with sfc;




/** 
 * Produktion:
 * Program   ::= "program" IDENT "[" "]" ""
 **/

sfc          ::= program:p {: RESULT=p; :}
                 ;


program      ::= BEGIN 
                 declist:dl     SEM
	         steps:sl       SEM
	         istep:i        SEM
                 actions:al     SEM
                 transitions:tl
                 END
                    {:  RESULT = new absynt.SFC(i,sl,tl,al,dl);  :}
;



declist      ::= VARS EQ LBRACKET  RBRACKET
                    {:  RESULT = _declist;  :}
              |  VARS EQ LBRACKET  declarations  RBRACKET
                    {:  RESULT = _declist;  :}
		 ;
declarations ::= declaration:d
                    {:  RESULT = _declist;
                        RESULT.addFirst(d); :}
              |  declaration:d SEM declarations
                    {:  RESULT = _declist; RESULT.addFirst(d); :}
		 ;

declaration  ::= IDENT:v COLON type:t EQ constval:e
                    {:  absynt.Variable _v = new absynt.Variable(v, t);
		        RESULT = new absynt.Declaration(_v, t, e);
		     :}
;
  

type         ::= INT 
                    {:  RESULT = new absynt.IntType();  :}
              |  BOOL
                    {:  RESULT = new absynt.BoolType();  :}
;


constval        ::= TRUE 
                    {:  RESULT = new absynt.Constval(true);  :}
                 |  FALSE
                    {:  RESULT = new absynt.Constval(false);  :}
	         |  INTEGER:i 
                    {:  RESULT = new absynt.Constval(i.intValue());  :}
  ;


// the abstract syntax needs a full step here, therefore we search for the
// right step in the steplist
istep	     ::= INIT EQ IDENT:stepname // init = s1
                 {: 
		  RESULT = get_step_by_name(stepname);
                 :} 
;

steps       ::=  STEPS EQ 
                 LBRACKET
                 steplist
                 RBRACKET
                    {:  RESULT = _steplist;  :}
  ;

steplist    ::=  step:s
                    {:  RESULT = _steplist;
                        RESULT.addFirst(s); :}
             |   step:s SEM steplist
                    {:  RESULT = _steplist; RESULT.addFirst(s); :}
  ;

step        ::=  LPAREN 
                 IDENT:s COMMA 
                 LBRACKET
                 stepactionlist:sal
                 RBRACKET
                 RPAREN
                    {:  RESULT = new absynt.Step(s,sal);  :}
             |   LPAREN
                 IDENT:s COMMA 
                 LBRACKET
                 RBRACKET
                 RPAREN
                    {:  RESULT = new absynt.Step(s);  :}
  ;


stepactionlist   ::= stepaction:sa
                    {:  RESULT = new LinkedList();
                        RESULT.addFirst(sa); :}
                   |  stepaction:sa SEM stepactionlist:sal
                    {:  RESULT = sal; RESULT.addFirst(sa); :}
  ;

stepaction      ::= LPAREN
                      qualifier:q COMMA IDENT:a
                      RPAREN
                    {: RESULT = new absynt.StepAction(q,a); :}
  ;

qualifier       ::= IDENT:q       // not as reserved word
                    {: RESULT = determine_qualifier(q); :}
  ;


actions         ::= ACTIONS EQ
                    LBRACKET
                    actionlist:al
                    RBRACKET
                    {: RESULT = al; :}
  ;


actionlist      ::= sfcaction:a
                    {:  RESULT = new LinkedList();
                        RESULT.addFirst(a); :}
                 |  sfcaction:a SEM actionlist:al
                    {:  RESULT = al; RESULT.addFirst(a); :}
  ;

sfcaction       ::=  IDENT:a EQ sap:s
                    {: RESULT = new absynt.Action(a,s); :}
  ;


sap             ::=  LBRACKET stmtlist:sl RBRACKET
                    {: RESULT = sl; :}
  ;

stmtlist        ::=  stmt:s
                    {:  RESULT = new LinkedList();
                        RESULT.addFirst(s); :}
                 |   stmt:s SEM stmtlist:sl
                    {:  RESULT = sl; RESULT.addFirst(s); :}
  ;

stmt            ::= SKIP
                    {: RESULT = new absynt.Skip(); :}
                 |  assign:s
                    {: RESULT = s; :}
  ;

assign          ::= var:x ASSIGN expr:e
                    {: RESULT = new absynt.Assign(x, e); :}
  ;

expr            ::= op:o expr:e
                    {: RESULT = new absynt.U_expr(o.intValue(),e); :}
                 |  expr:e1 op:o expr:e2
                    {: RESULT = new absynt.B_expr(e1,o.intValue(),e2); :}
                 |  LPAREN expr:e RPAREN
                    {: RESULT = e; :}
                 |  var:v
                    {: RESULT = v; :}
                 | constval:v
                    {: RESULT = v; :}
  ;

op              ::= PLUS     {: RESULT= new Integer(absynt.Expr.PLUS); :}
                 |  MINUS    {: RESULT= new Integer(absynt.Expr.MINUS); :}
                 |  TIMES    {: RESULT= new Integer(absynt.Expr.TIMES); :}
                 |  DIV      {: RESULT= new Integer(absynt.Expr.DIV); :}
                 |  AND      {: RESULT= new Integer(absynt.Expr.AND); :}
                 |  OR       {: RESULT= new Integer(absynt.Expr.OR); :}
                 |  NEG      {: RESULT= new Integer(absynt.Expr.NEG); :}
                 |  LESS     {: RESULT= new Integer(absynt.Expr.LESS); :}
                 |  GREATER  {: RESULT= new Integer(absynt.Expr.GREATER); :}
                 |  LEQ      {: RESULT= new Integer(absynt.Expr.LEQ); :}
                 |  GEQ      {: RESULT= new Integer(absynt.Expr.GEQ); :}
                 |  EQ       {: RESULT= new Integer(absynt.Expr.EQ); :}
                 |  NEQ      {: RESULT= new Integer(absynt.Expr.NEQ); :}
  ;

var             ::= IDENT:v
                     {: RESULT = get_variable_by_name(v); :}
  ;


transitions     ::=  TRANSITIONS EQ 
                     LBRACKET
                     transitionlist:tl
                     RBRACKET
                    {:  RESULT = tl;  :}
  ;

transitionlist  ::=  transition:t
                    {:  RESULT = new LinkedList();
                        RESULT.addFirst(t); :}
                 |   transition:t SEM transitionlist:tl
                    {:  RESULT = tl; RESULT.addFirst(t); :}
  ;

transition      ::=  LBRACKET stepnames:s RBRACKET FROMTO LBRACKET stepnames:t RBRACKET
                         {: RESULT = new absynt.Transition(s,t); :}
                 |   LBRACKET stepnames:s RBRACKET FROMTO LBRACKET stepnames:t RBRACKET
                     WHEN expr:g
                         {: RESULT = new absynt.Transition(s,g,t); :}
  ;
                  

// in the abstract syntax the full step (with full actions) is needed,
// therefore we search in the global steplist for the step and add this
// step to the source/targest steplist
stepnames       ::= IDENT:s
                    {:  RESULT = new LinkedList();
		        RESULT.addFirst(get_step_by_name(s));
		     :}
                 |  IDENT:s SEM stepnames:sl
                    {:  RESULT = sl;
		        RESULT.addFirst(get_step_by_name(s));
		     :}
  ;
