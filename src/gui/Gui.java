/*
 * Gui.java
 *
 * Created on 16. Mai 2001, 22:27
 */


package gui;


import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.File;
import java.lang.Integer;

import absynt.*;
import editor.*;
import smv.*;
//import simulator.*;
//import checks.*;


/**
 *
 * @authors Ingo Schiller and Hans Theman
 * @version 1.0
 */
public class Gui extends javax.swing.JFrame {

    /** private declarations */
    private JOptionPane SnotOptionPane = null; // hierin werden jegliche popups dargestellt
    private Session session = null;
    private Project activeProject = null;  // referes to the focosed Project
    private boolean ready_to_exit = true;  // indicates whether exit Snot or not

    private final String TITLE = "Snot";    // the Gui title
    
    
        /** Creates new form Gui */
	public Gui(Session _session) {
            // preparing startup
            SnotOptionPane = new JOptionPane();
            session = _session;
            if (session==null)
                enableSession(false);
            
            // set GUI L&F
            try {
                // UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName()); // the standard
            } catch (Exception exc) {
                System.err.println("Error loading L&F: " + exc);
            }
            
            // preparing visual components
            initComponents ();
            ToolBarTools.setFloatable(true);
            pack ();
            this.setResizable(false);
            setLocation(100,50);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the FormEditor.
	 */
        private void initComponents() {//GEN-BEGIN:initComponents
            jMenuBar = new javax.swing.JMenuBar();
            FileMenu = new javax.swing.JMenu();
            OpenSession = new javax.swing.JMenuItem();
            NewSession = new javax.swing.JMenuItem();
            jSeparator2 = new javax.swing.JSeparator();
            SaveSession = new javax.swing.JMenuItem();
            SaveAsSession = new javax.swing.JMenuItem();
            CloseSession = new javax.swing.JMenuItem();
            jSeparator3 = new javax.swing.JSeparator();
            ExitSnot = new javax.swing.JMenuItem();
            Edit = new javax.swing.JMenu();
            NewSFC = new javax.swing.JMenuItem();
            jSeparator4 = new javax.swing.JSeparator();
            ImportSFC = new javax.swing.JMenuItem();
            ExportSFC = new javax.swing.JMenuItem();
            jSeparator5 = new javax.swing.JSeparator();
            RenameSFC = new javax.swing.JMenuItem();
            RemoveSFC = new javax.swing.JMenuItem();
            ToolsMenu = new javax.swing.JMenu();
            Editor = new javax.swing.JMenuItem();
            CheckSFC = new javax.swing.JMenuItem();
            Simulator = new javax.swing.JMenuItem();
            SMV = new javax.swing.JMenuItem();
            View = new javax.swing.JMenu();
            SFCBrowser = new javax.swing.JCheckBoxMenuItem();
            ShowToolBar = new javax.swing.JCheckBoxMenuItem();
            HelpMenu = new javax.swing.JMenu();
            About = new javax.swing.JMenuItem();
            ToolBarTools = new javax.swing.JToolBar();
            ButtonEditor = new javax.swing.JButton();
            ButtonCheckSFC = new javax.swing.JButton();
            ButtonSimulator = new javax.swing.JButton();
            ButtonSMV = new javax.swing.JButton();
            PanelStatus = new javax.swing.JPanel();
            Status = new javax.swing.JLabel();
            jSeparator1 = new javax.swing.JSeparator();
            
            FileMenu.setActionCommand(null);
              FileMenu.setText("File");
              
              OpenSession.setLabel("Open Session");
                OpenSession.setName("openSession");
                OpenSession.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        OpenSessionActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(OpenSession);
                
              NewSession.setLabel("New");
                NewSession.setName("newSession");
                NewSession.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        NewSessionActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(NewSession);
                
              FileMenu.add(jSeparator2);
                
              SaveSession.setLabel("Save Session");
                SaveSession.setName("saveSession");
                SaveSession.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SaveSessionActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(SaveSession);
                
              SaveAsSession.setLabel("Save as");
                SaveAsSession.setName("saveAsSession");
                SaveAsSession.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SaveAsSessionActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(SaveAsSession);
                
              CloseSession.setLabel("Close Session");
                CloseSession.setName("closeSession");
                CloseSession.setText("Close");
                CloseSession.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        CloseSessionActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(CloseSession);
                
              FileMenu.add(jSeparator3);
                
              ExitSnot.setLabel("Exit");
                ExitSnot.setName("exitSnot");
                ExitSnot.setText("Exit Snot");
                ExitSnot.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ExitSnotActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(ExitSnot);
                jMenuBar.add(FileMenu);
              
            Edit.setLabel("Edit");
              Edit.setName("Edit");
              
              NewSFC.setLabel("New SFC");
                NewSFC.setName("newSFC");
                NewSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        NewSFCActionPerformed(evt);
                    }
                }
                );
                Edit.add(NewSFC);
                
              Edit.add(jSeparator4);
                
              ImportSFC.setLabel("Import");
                ImportSFC.setName("importSFC");
                ImportSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ImportSFCActionPerformed(evt);
                    }
                }
                );
                Edit.add(ImportSFC);
                
              ExportSFC.setLabel("Export");
                ExportSFC.setName("exportSFC");
                ExportSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ExportSFCActionPerformed(evt);
                    }
                }
                );
                Edit.add(ExportSFC);
                
              Edit.add(jSeparator5);
                
              RenameSFC.setLabel("Rename");
                RenameSFC.setName("renameSFC");
                RenameSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        RenameSFCActionPerformed(evt);
                    }
                }
                );
                Edit.add(RenameSFC);
                
              RemoveSFC.setLabel("Remove");
                RemoveSFC.setName("removeSFC");
                RemoveSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        RemoveSFCActionPerformed(evt);
                    }
                }
                );
                Edit.add(RemoveSFC);
                jMenuBar.add(Edit);
              
            ToolsMenu.setText("Tools");
              
              Editor.setLabel("Editor");
                Editor.setName("editor");
                Editor.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        EditorActionPerformed(evt);
                    }
                }
                );
                ToolsMenu.add(Editor);
                
              CheckSFC.setLabel("Check SFC");
                CheckSFC.setName("check");
                CheckSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        CheckSFCActionPerformed(evt);
                    }
                }
                );
                ToolsMenu.add(CheckSFC);
                
              Simulator.setLabel("Simulator");
                Simulator.setName("simulator");
                Simulator.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SimulatorActionPerformed(evt);
                    }
                }
                );
                ToolsMenu.add(Simulator);
                
              SMV.setLabel("SMV translation");
                SMV.setName("smv");
                SMV.setText("SMV");
                SMV.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SMVActionPerformed(evt);
                    }
                }
                );
                ToolsMenu.add(SMV);
                jMenuBar.add(ToolsMenu);
              
            View.setLabel("View");
              View.setName("View");
              
              SFCBrowser.setLabel("SFC Browser");
                SFCBrowser.setName("SFCBrowser");
                SFCBrowser.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SFCBrowserActionPerformed(evt);
                    }
                }
                );
                View.add(SFCBrowser);
                
              ShowToolBar.setLabel("Tool Bar");
                ShowToolBar.setSelected(true);
                ShowToolBar.setName("showToolBar");
                ShowToolBar.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ShowToolBarActionPerformed(evt);
                    }
                }
                );
                View.add(ShowToolBar);
                jMenuBar.add(View);
              
            HelpMenu.setText("? (Help) ");
              
              About.setLabel("About");
                About.setName("about");
                About.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        AboutActionPerformed(evt);
                    }
                }
                );
                HelpMenu.add(About);
                jMenuBar.add(HelpMenu);
              setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            setName("frameGUI");
            setTitle("Snot");
            setBackground(java.awt.Color.lightGray);
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setFont(new java.awt.Font ("Abadi MT Condensed Light", 0, 12));
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent evt) {
                    exitForm(evt);
                }
            }
            );
            
            ToolBarTools.setName("ToolBarTools");
            ToolBarTools.setMinimumSize(new java.awt.Dimension(378, 39));
            
            ButtonEditor.setPreferredSize(new java.awt.Dimension(90, 35));
              ButtonEditor.setToolTipText("Launch editor");
              ButtonEditor.setMaximumSize(new java.awt.Dimension(180, 35));
              ButtonEditor.setName("buttonEditor");
              ButtonEditor.setText("Editor");
              ButtonEditor.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                      EditorActionPerformed(evt);
                  }
              }
              );
              ToolBarTools.add(ButtonEditor);
              
              
            ButtonCheckSFC.setPreferredSize(new java.awt.Dimension(90, 35));
              ButtonCheckSFC.setToolTipText("Check SFC");
              ButtonCheckSFC.setMaximumSize(new java.awt.Dimension(180, 35));
              ButtonCheckSFC.setName("buttonCheck");
              ButtonCheckSFC.setText("Check");
              ButtonCheckSFC.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                      CheckSFCActionPerformed(evt);
                  }
              }
              );
              ToolBarTools.add(ButtonCheckSFC);
              
              
            ButtonSimulator.setPreferredSize(new java.awt.Dimension(90, 35));
              ButtonSimulator.setToolTipText("Simulate SFC");
              ButtonSimulator.setMaximumSize(new java.awt.Dimension(180, 35));
              ButtonSimulator.setName("buttonSimulator");
              ButtonSimulator.setText("Simulator");
              ButtonSimulator.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                      SimulatorActionPerformed(evt);
                  }
              }
              );
              ToolBarTools.add(ButtonSimulator);
              
              
            ButtonSMV.setPreferredSize(new java.awt.Dimension(90, 35));
              ButtonSMV.setToolTipText("Transform SFC to SMV");
              ButtonSMV.setMaximumSize(new java.awt.Dimension(180, 35));
              ButtonSMV.setName("buttonSMV");
              ButtonSMV.setText("SMV");
              ButtonSMV.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                      SMVActionPerformed(evt);
                  }
              }
              );
              ToolBarTools.add(ButtonSMV);
              
              
            getContentPane().add(ToolBarTools, java.awt.BorderLayout.NORTH);
            
            
            PanelStatus.setLayout(new java.awt.GridLayout(1, 1, 20, 0));
            PanelStatus.setPreferredSize(new java.awt.Dimension(400, 20));
            PanelStatus.setName("panelStatus");
            PanelStatus.setMinimumSize(new java.awt.Dimension(200, 20));
            
            Status.setName("statusLine");
              Status.setText("StatusLine");
              PanelStatus.add(Status);
              
              
            getContentPane().add(PanelStatus, java.awt.BorderLayout.SOUTH);
            
            
            
            getContentPane().add(jSeparator1, java.awt.BorderLayout.CENTER);
            
            setJMenuBar(jMenuBar);
            
        }//GEN-END:initComponents

/**********************************************************************************
 *
 *      Some ActionListeners
 *
 **********************************************************************************/
        
  private void RemoveSFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSFCActionPerformed
    Project project = activeProject; // for security reason
    String msg = null;
    int result = 0;
    
// check for valid session. This should never be entered!!!
     if (session == null) {
          System.out.print("\n An error occured! RenameSFC was called without an active Session!!");
          return;
     }
      
     // check for active Projects
     if (session.isEmpty() || project == null) {
         if (session.isEmpty())
             msg = new String("There is no SFC in this session!\n");
         else
             msg = new String("Please select a SFC first!\n"); 

         SnotOptionPane.showMessageDialog(null, msg, "Error", JOptionPane.ERROR_MESSAGE);
         return;
     }

     // show Remove Dialog
     result = SnotOptionPane.showConfirmDialog(null, "You are about to remove SFC \""+project.getName()+"\" from the current session.\nIf it is not exportet or saved its content will be lost!\n\n Do you wish to proceed?", 
                                        "Remove SFC from Session", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
     
     if (result == JOptionPane.NO_OPTION) 
         return;
     
     // removing SFC from session
     session.removeProject(project);
     activeProject = null;
  }//GEN-LAST:event_RemoveSFCActionPerformed

  private void RenameSFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RenameSFCActionPerformed
     String input = null;
     String msg = null;
     Project project = activeProject; // for security reason

// check for valid session. This should never be entered!!!
     if (session == null) {
          System.out.print("\n An error occured! RenameSFC was called without an active Session!!");
          return;
     }
      
     // check for active Projects
     if (session.isEmpty() || project == null) {
         if (session.isEmpty())
            msg = new String("There is no SFC in the session!\n");
         else
            msg = new String("Please select a SFC first!\n"); 
         
         SnotOptionPane.showMessageDialog(null, msg, "Error", JOptionPane.ERROR_MESSAGE);
         return;
     }

     // show Rename Dialog
     input = SnotOptionPane.showInputDialog(null, "The current SFC's name is \""+project.getName()+"\".\nPlease enter a new name and hit \"OK\"", 
                                        "Rename SFC", JOptionPane.PLAIN_MESSAGE);
     // set new name
     if (input != null && input.length()>0) 
          project.setName(input);
  }//GEN-LAST:event_RenameSFCActionPerformed

  private void NewSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewSessionActionPerformed
      int response;
      ready_to_exit = true;  // just in case ...
      
      // check for active session
      if (session != null) {
          if (session.is_modified) {
              response = SnotOptionPane.showConfirmDialog(null, "There already is an active unsaved session!\n Without saving the changes will be lost!\n\nDo you want to save the changes before opening a new session?\n",
                                            "Alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
          }
          else if (session.is_saved) {
              response = SnotOptionPane.showConfirmDialog(null, "There already is an active session!\nOpening a new once will close the current session.\n\n Do you wish to proceed?\n",
                                            "Alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
          }
          else {
              response = SnotOptionPane.showConfirmDialog(null, "The active session is not saved!\n Without saving its contents will be lost!\n\nDo you want to save it before opening a new session?\n",
                                            "Alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
          }
              
          switch (response) {
              case JOptionPane.YES_OPTION: SaveSessionActionPerformed(null); break;
              case JOptionPane.NO_OPTION: break;
              case JOptionPane.CANCEL_OPTION:
              case JOptionPane.CLOSED_OPTION: return;
          }

          // check if SaveSessionActionPerformed was aborted
          if (!ready_to_exit)
              return;
             
          closeSession();  
      }

      try {
          session = new Session();
      }
      catch (Exception ex) {
          SnotOptionPane.showMessageDialog(null, ex.getMessage(),
                                        "Error", JOptionPane.WARNING_MESSAGE);
          session = null;
          return;
      }
      
      enableSession(true);
  }//GEN-LAST:event_NewSessionActionPerformed

  private void ShowToolBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowToolBarActionPerformed
      // switch the Tools ToolBar on and off in the Gui
      if (ShowToolBar.isSelected())
          ToolBarTools.setVisible(true);
      else
          ToolBarTools.setVisible(false);
      this.pack();
  }//GEN-LAST:event_ShowToolBarActionPerformed

  private void SFCBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SFCBrowserActionPerformed
      SnotOptionPane.showMessageDialog(null, "SFC browser not yet implemented!\n",
                                       "Error", JOptionPane.ERROR_MESSAGE); 
  }//GEN-LAST:event_SFCBrowserActionPerformed

  private void SMVActionPerformed(java.awt.event.ActionEvent evt) {
      Project project = activeProject;
      System.out.print("\nlaunching SMVTranslator ...");
      
      try {
          new SMVTranslator(project.getSFC());
      }
      catch (Exception ex) {
          SnotOptionPane.showMessageDialog(null, ex.getMessage(), //"SMV is not yet implemented!", 
                                              "Error", JOptionPane.ERROR_MESSAGE); 
      }
  }

  private void SimulatorActionPerformed(java.awt.event.ActionEvent evt) {
      SnotOptionPane.showMessageDialog(null, "Simulator is not yet implemented!", 
                                        "Error", JOptionPane.ERROR_MESSAGE); 
  }

  private void CheckSFCActionPerformed(java.awt.event.ActionEvent evt) {
      SnotOptionPane.showMessageDialog(null, "Check is not yet implemented!", 
                                        "Error", JOptionPane.ERROR_MESSAGE); 
  }

  private void EditorActionPerformed(java.awt.event.ActionEvent evt) {
      NewSFCActionPerformed(null);
  }

  private void ExitSnotActionPerformed(java.awt.event.ActionEvent evt) {
        prepareForExitSnot(true);
  }

  /**
   * The ExportSFC function:
   * Exports a single SFC. It catches events from the ToolBarButtons and Menu. 
   * @param evt the ActionEvent
   * @see #Project.saveSFC
   */
  
  private void ExportSFCActionPerformed(java.awt.event.ActionEvent evt) {
      Project project = activeProject;

      // check for empty projects vector
      if (session.isEmpty()) {
          SnotOptionPane.showMessageDialog(null, "Export SFC error:\nThere are no SFCs in the current session!",
                                           "Error", JOptionPane.ERROR_MESSAGE);
          return;
      }
      
      // initialize FileChooser
      JFileChooser chooser = new JFileChooser();
      chooser.setFileFilter(new SnotFileFilter("sfc","Sequ.Func.Chart"));
      chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);
      chooser.setApproveButtonToolTipText("Export SFC");
      chooser.setDialogTitle("Export SFC");
      
      // set prefered Directory and filename
      if (session.fileName != "")
          chooser.setCurrentDirectory(new File(session.fileName));
      
      chooser.setSelectedFile(new File(project.getName()));
            
      // finaly display FileChooser
      int result = chooser.showDialog(null, "Export");
      if (result == JFileChooser.APPROVE_OPTION) {
         System.out.print("\nExport SFC: SFC would be exported as \""+chooser.getSelectedFile()+"\"");
         try {
            project.saveSFC(chooser.getSelectedFile());
         }
         catch (Exception ex) {
             SnotOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
         }
      }
  }

  /**
   * The ImportSFC function:
   * Imports a single SFC. It catches events from the ToolBarButtons and Menu. 
   * @param evt the ActionEvent
   * @see #Project.openSFC
   */

  private void ImportSFCActionPerformed(java.awt.event.ActionEvent evt) {
      // check for valid session
      if (session == null) {
           SnotOptionPane.showMessageDialog(null, "Importing a new SFC failed!\nCannot import a SFC without an active session.\nPlease open or create a new session first!", 
                                            "Error", JOptionPane.ERROR_MESSAGE);
           return;
      }

      // initializing FileChooser
      JFileChooser chooser = new JFileChooser();
      chooser.setFileFilter(new SnotFileFilter("sfc","Blubb"));
      chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);
      chooser.setApproveButtonToolTipText("Import SFC");
      chooser.setDialogTitle("Import SFC");
      
      // set prefered Directory
      if (session.fileName != "")
          chooser.setCurrentDirectory(new File(session.fileName));
      
      // show FileChooser
      int result = chooser.showDialog(null, "Import");
      if (result == JFileChooser.APPROVE_OPTION) {
          try {
              session.addProject(Project.openSFC(chooser.getSelectedFile()));
          }
          catch (Exception ex) {
               SnotOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
          }
      }
  }

  /**
   * The NewSFC function:
   * Opens a new Project and adds it to the current session.
   * This function catches events from the ToolBarButtons and Menu.
   * @param evt the ActionEvent
   * @see #Session.addProject
   */
  
  private void NewSFCActionPerformed(java.awt.event.ActionEvent evt) {
      Project project = null;
      Editor editor = null;

      // check for valid session
      if (session == null) {
           SnotOptionPane.showMessageDialog(null, "Creating a new SFC failed!\nCannot load a SFC without an active session.\nPlease open or create a new session first!", 
                                            "Error", JOptionPane.ERROR_MESSAGE);
           return;
      }
           
      // launch Editor with new SFC
      try {
          project = new Project();
          editor = new Editor(project.getSFC());
      }
      catch (Exception ex) {
           SnotOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
           return;
      }

      // set editor parameters
      editor.setLocation(250, 250);
      editor.addWindowListener(new GuiWindowListener());
      project.setEditor(editor);

      // add new Project to session
      try {
          session.addProject(project);
      }
      catch (Exception ex) {
           SnotOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);           
           return;
      }
      // set environmental parameters
      session.is_modified = true;
      editor.show();
 }      



  private void CloseSessionActionPerformed(java.awt.event.ActionEvent evt) {
      prepareForExitSnot(false);
      if (!ready_to_exit)
          return;
      closeSession();
  }

  private void SaveSessionActionPerformed(java.awt.event.ActionEvent evt) {
      ready_to_exit = true;  // global exit state
      
      if (session.fileName!="")
            session.save();
      else
          SaveAsSessionActionPerformed(null);
  }

  private void OpenSessionActionPerformed(java.awt.event.ActionEvent evt) {
      int response;
      ready_to_exit = true;  // just in case ...
      
      // check for active session
      if (session != null) {
          if (session.is_modified) {
              response = SnotOptionPane.showConfirmDialog(null, "There already is an active unsaved session!\n Without saving the changes will be lost!\n\nDo you want to save the changes before opening a new session?\n",
                                            "Alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
          }
          else if (session.is_saved) {
              response = SnotOptionPane.showConfirmDialog(null, "There already is an active session!\nOpening a new once will close the current session.\n\n Do you wish to proceed?\n",
                                            "Alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
          }
          else {
              response = SnotOptionPane.showConfirmDialog(null, "The active session is not saved!\n Without saving its contents will be lost!\n\nDo you want to save it before opening a new session?\n",
                                            "Alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
          }
              
          switch (response) {
              case JOptionPane.YES_OPTION: SaveSessionActionPerformed(null); break;
              case JOptionPane.NO_OPTION: break;
              case JOptionPane.CANCEL_OPTION:
              case JOptionPane.CLOSED_OPTION: return;
          }

          // check if SaveSessionActionPerformed was aborted
          if (!ready_to_exit)
              return;
             
//          closeSession();  closing session as late as possible!! see below
      }

      JFileChooser chooser = new JFileChooser();
      chooser.setFileFilter(new SnotFileFilter("snot","Snot sessions"));
      chooser.setDialogTitle("Open session");
      
      if (session != null && session.fileName != "")
          chooser.setCurrentDirectory(new File(session.fileName));

      int result = chooser.showOpenDialog(null);
      if (result == JFileChooser.APPROVE_OPTION) {
          closeSession();          
          try {
              session = openSession(chooser.getSelectedFile());
          }
          catch (Exception ex) {
              SnotOptionPane.showMessageDialog(null, ex.getMessage(),
                                            "Error", JOptionPane.WARNING_MESSAGE);
              session = null;
          }
      }
  }

  private void SaveAsSessionActionPerformed(java.awt.event.ActionEvent evt) {
      ready_to_exit = true; // setting global exit state
      
      JFileChooser chooser = new JFileChooser();
      chooser.setFileFilter(new SnotFileFilter("snot","Snot sessions"));
      chooser.setDialogTitle("Save session as");
      int result = chooser.showDialog(null, "Save as");
      if (result == JFileChooser.APPROVE_OPTION) {
         System.out.print("\n Save Session As: Session would be saved as \""+chooser.getSelectedFile()+"\"");
//          saveSession(chooser.getSelectedFile());
         session.is_saved = true;   // ... ??? what ever!
      }
      else 
          ready_to_exit = false;
  }
			  
  private void AboutActionPerformed(java.awt.event.ActionEvent evt) {
      SnotOptionPane.showMessageDialog(null, "Snot\n Still in experimental phase 0.1\n Please hang on for later versions ...", 
                                        "About", JOptionPane.INFORMATION_MESSAGE); 
  }

					  
	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
            prepareForExitSnot(true);
	}//GEN-LAST:event_exitForm
	
/*******************************************************************************
 *
 *      Some selfmade utilities   
 *
 *******************************************************************************/

    private void enableSession(boolean state) {
        // en-disable menus
        SaveSession.setEnabled(state);
        SaveAsSession.setEnabled(state);
        CloseSession.setEnabled(state);
        
        Edit.setEnabled(state);
        ToolsMenu.setEnabled(state);
        View.setEnabled(state);
        
        // en-disable buttons
        ButtonEditor.setEnabled(state);
        ButtonCheckSFC.setEnabled(state);
        ButtonSimulator.setEnabled(state);
        ButtonSMV.setEnabled(state);
    }
        
    private void closeSession() {
        // do not check wether the session is saved or changed!
        // just close it and clean up the environment!
        // close all pending editor-windows!
//#########################################
//      Please complete me !!!
//#########################################
        
        if (session == null)
            return; // just in case ...
        
        Frame[] frames = getFrames();
        
        // closing open frames: frames[0] is GuiFrame!!!!
        if (frames != null) {
            for (int i=1; i<(frames.length-1); i++) {
                    frames[i].dispose();
    //            System.out.print("\n"+frames[i].getName());
            }
        }
        
        enableSession(false);
        session = null;
        this.setTitle(TITLE);
        System.out.print("\nSession is closed!");
    }
    
    private Session openSession(File file) {
        // read session from file and load all environmental parameters and windows
//#########################################
//      Please complete me !!!
//#########################################
        
        Session local_session = new Session();
        local_session.fileName = file.toString();
        local_session.name = file.getName().replace('.', '\0');
        
        setTitle(TITLE+"  "+local_session.name);
        enableSession(true);
        
        System.out.print("\n ... opening new session from file \""+file+"\": name: "+file.getName()+", "+file.toString());
        return local_session;
    }
    

    private void prepareForExitSnot(boolean exit) {
        int result = JOptionPane.CANCEL_OPTION;
        ready_to_exit = true;

        if (session == null)
            exitSnot();
        
        if (session.is_modified) 
            result = SnotOptionPane.showConfirmDialog(null, "The session has changed!\n\nDo you want to save it?",
                                            "Alert!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        else if (!session.is_saved)  
            result = SnotOptionPane.showConfirmDialog(null, "The session is not saved!\n\nDo you want to save it now?",
                                            "Alert!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        else if (exit) 
                exitSnot();
            else 
                return;

        switch (result) {
            case JOptionPane.YES_OPTION: SaveSessionActionPerformed(null);
            case JOptionPane.NO_OPTION: if (exit && ready_to_exit) exitSnot(); break;
            case JOptionPane.CANCEL_OPTION:
            case JOptionPane.CLOSED_OPTION: ready_to_exit = false; break;
        }
    }
        

    private void exitSnot() {
        // function must terminate Snot!
        // collect all opened Frames/Windows and close em all!!! -> editor Windows need to be closed!!
//#########################################
//      Please complete me !!!
//#########################################
        
// perhaps if session still active call closeSession()???        
        System.exit(0);
    }
        
        
        
        
	/**
         * The main function:
	 * @param args the command line arguments
	 */
	public static void main (String args[]) {
                
		new Gui (new Session()).show ();
	}
	
/*******************************************************************************
 *
 *      The subclass GuiWindowListener 
 *
 *******************************************************************************/

    class GuiWindowListener implements WindowListener {
    
        public void windowActivated(java.awt.event.WindowEvent evt) {
            // set the active Project
            activeProject = session.getProject(evt.getSource());
            System.out.print("\n Window "+activeProject+" Activated");
        }
        
        public void windowDeactivated(java.awt.event.WindowEvent evt) {
//            System.out.print("\n Window Deactivated");
        }        
	
        public void windowClosed(java.awt.event.WindowEvent evt) {
            System.out.print("\n Window "+activeProject+" Closed");            
        }
        
        public void windowDeiconified(java.awt.event.WindowEvent evt) {
            System.out.print("\n Window "+activeProject+" Deiconified");
        }
        
        public void windowOpened(java.awt.event.WindowEvent evt) {
            if (activeProject!=null)
                activeProject.is_active = true;
            System.out.print("\n Window "+activeProject+" Opened");
        }
        
        public void windowIconified(java.awt.event.WindowEvent evt) {
            System.out.print("\n Window "+activeProject+" Iconified");
        }
        
        public void windowClosing(java.awt.event.WindowEvent evt) {
            if (activeProject!=null)
                activeProject.is_active = false;
            System.out.print("\n Window "+activeProject+" Closing");
            activeProject = null;
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem OpenSession;
    private javax.swing.JMenuItem NewSession;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem SaveSession;
    private javax.swing.JMenuItem SaveAsSession;
    private javax.swing.JMenuItem CloseSession;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JMenuItem ExitSnot;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem NewSFC;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JMenuItem ImportSFC;
    private javax.swing.JMenuItem ExportSFC;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JMenuItem RenameSFC;
    private javax.swing.JMenuItem RemoveSFC;
    private javax.swing.JMenu ToolsMenu;
    private javax.swing.JMenuItem Editor;
    private javax.swing.JMenuItem CheckSFC;
    private javax.swing.JMenuItem Simulator;
    private javax.swing.JMenuItem SMV;
    private javax.swing.JMenu View;
    private javax.swing.JCheckBoxMenuItem SFCBrowser;
    private javax.swing.JCheckBoxMenuItem ShowToolBar;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuItem About;
    private javax.swing.JToolBar ToolBarTools;
    private javax.swing.JButton ButtonEditor;
    private javax.swing.JButton ButtonCheckSFC;
    private javax.swing.JButton ButtonSimulator;
    private javax.swing.JButton ButtonSMV;
    private javax.swing.JPanel PanelStatus;
    private javax.swing.JLabel Status;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
	
}