/*
 * Gui.java
 *
 * Created on 16. Mai 2001, 22:27
 */


package gui;


import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.File;

import absynt.*;
import editor.*;

/**
 *
 * @authors Ingo Schiller and Hans Theman
 * @version 1.0
 */
public class Gui extends javax.swing.JFrame {

    /** private declarations */
    private JOptionPane SnotOptionPane = null; // hierin werden jegliche popups dargestellt
    private Session session = null;
    private int activeProject;  // index to an item in the session.project-Vector!
    private boolean ready_to_exit = true;  // indicates whether exit Snot or not

        /** Creates new form Gui */
	public Gui(Session _session) {
            // preparing startup
            SnotOptionPane = new JOptionPane();
            session = _session;
            activeProject = 0; // points to first item in the session.project-Vector
            
            // set GUI L&F
            try {
                // UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName()); // the standard
            } catch (Exception exc) {
                System.err.println("Error loading L&F: " + exc);
            }
            
            // preparing visual components
            initComponents ();
            jToolBarTools.setFloatable(true);
            pack ();
 //           this.setResizable(false);
            setLocation(100,50);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the FormEditor.
	 */
        private void initComponents() {//GEN-BEGIN:initComponents
            jMenuBar = new javax.swing.JMenuBar();
            FileMenu = new javax.swing.JMenu();
            OpenSession = new javax.swing.JMenuItem();
            SaveSession = new javax.swing.JMenuItem();
            SaveAsSession = new javax.swing.JMenuItem();
            CloseSession = new javax.swing.JMenuItem();
            jSeparator2 = new javax.swing.JSeparator();
            NewSFC = new javax.swing.JMenuItem();
            ImportSFC = new javax.swing.JMenuItem();
            ExportSFC = new javax.swing.JMenuItem();
            jSeparator3 = new javax.swing.JSeparator();
            ExitSnot = new javax.swing.JMenuItem();
            Edit = new javax.swing.JMenu();
            ToolsMenu = new javax.swing.JMenu();
            Editor = new javax.swing.JMenuItem();
            CheckSFC = new javax.swing.JMenuItem();
            Simulator = new javax.swing.JMenuItem();
            SMV = new javax.swing.JMenuItem();
            View = new javax.swing.JMenu();
            HelpMenu = new javax.swing.JMenu();
            About = new javax.swing.JMenuItem();
            jToolBarTools = new javax.swing.JToolBar();
            ButtonEditor = new javax.swing.JButton();
            ButtonCheckSFC = new javax.swing.JButton();
            ButtonSimulator = new javax.swing.JButton();
            ButtonSMV = new javax.swing.JButton();
            PanelStatus = new javax.swing.JPanel();
            Status = new javax.swing.JLabel();
            jSeparator1 = new javax.swing.JSeparator();
            
            FileMenu.setActionCommand(null);
              FileMenu.setText("File");
              
              OpenSession.setLabel("Open Session");
                OpenSession.setName("openSession");
                OpenSession.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        OpenSessionActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(OpenSession);
                
              SaveSession.setLabel("Save Session");
                SaveSession.setName("saveSession");
                SaveSession.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SaveSessionActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(SaveSession);
                
              SaveAsSession.setLabel("Save as");
                SaveAsSession.setName("saveAsSession");
                SaveAsSession.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SaveAsSessionActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(SaveAsSession);
                
              CloseSession.setLabel("Close Session");
                CloseSession.setName("closeSession");
                CloseSession.setText("Close");
                CloseSession.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        CloseSessionActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(CloseSession);
                
              FileMenu.add(jSeparator2);
                
              NewSFC.setLabel("New SFC");
                NewSFC.setName("newSFC");
                NewSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        NewSFCActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(NewSFC);
                
              ImportSFC.setLabel("Import SFC");
                ImportSFC.setName("importSFC");
                ImportSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ImportSFCActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(ImportSFC);
                
              ExportSFC.setLabel("Export SFC");
                ExportSFC.setName("exportSFC");
                ExportSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ExportSFCActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(ExportSFC);
                
              FileMenu.add(jSeparator3);
                
              ExitSnot.setLabel("Exit");
                ExitSnot.setName("exitSnot");
                ExitSnot.setText("Exit Snot");
                ExitSnot.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ExitSnotActionPerformed(evt);
                    }
                }
                );
                FileMenu.add(ExitSnot);
                jMenuBar.add(FileMenu);
              
            Edit.setLabel("Edit");
              Edit.setName("Edit");
              jMenuBar.add(Edit);
              
            ToolsMenu.setText("Tools");
              
              Editor.setLabel("Editor");
                Editor.setName("editor");
                Editor.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        EditorActionPerformed(evt);
                    }
                }
                );
                ToolsMenu.add(Editor);
                
              CheckSFC.setLabel("Check SFC");
                CheckSFC.setName("check");
                CheckSFC.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        CheckSFCActionPerformed(evt);
                    }
                }
                );
                ToolsMenu.add(CheckSFC);
                
              Simulator.setLabel("Simulator");
                Simulator.setName("simulator");
                Simulator.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SimulatorActionPerformed(evt);
                    }
                }
                );
                ToolsMenu.add(Simulator);
                
              SMV.setLabel("SMV translation");
                SMV.setName("smv");
                SMV.setText("SMV");
                SMV.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SMVActionPerformed(evt);
                    }
                }
                );
                ToolsMenu.add(SMV);
                jMenuBar.add(ToolsMenu);
              
            View.setLabel("View");
              View.setName("View");
              jMenuBar.add(View);
              
            HelpMenu.setText("? (Help) ");
              
              About.setLabel("About");
                About.setName("about");
                About.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        AboutActionPerformed(evt);
                    }
                }
                );
                HelpMenu.add(About);
                jMenuBar.add(HelpMenu);
              setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            setName("frameGUI");
            setTitle("Snot");
            setBackground(java.awt.Color.lightGray);
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setFont(new java.awt.Font ("Abadi MT Condensed Light", 0, 12));
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent evt) {
                    exitForm(evt);
                }
            }
            );
            
            jToolBarTools.setName("ToolBarTools");
            jToolBarTools.setMinimumSize(new java.awt.Dimension(378, 39));
            
            ButtonEditor.setPreferredSize(new java.awt.Dimension(90, 35));
              ButtonEditor.setToolTipText("Launch editor");
              ButtonEditor.setMaximumSize(new java.awt.Dimension(180, 35));
              ButtonEditor.setName("buttonEditor");
              ButtonEditor.setText("Editor");
              ButtonEditor.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                      EditorActionPerformed(evt);
                  }
              }
              );
              jToolBarTools.add(ButtonEditor);
              
              
            ButtonCheckSFC.setPreferredSize(new java.awt.Dimension(90, 35));
              ButtonCheckSFC.setMaximumSize(new java.awt.Dimension(180, 35));
              ButtonCheckSFC.setName("buttonCheck");
              ButtonCheckSFC.setText("Check");
              ButtonCheckSFC.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                      CheckSFCActionPerformed(evt);
                  }
              }
              );
              jToolBarTools.add(ButtonCheckSFC);
              
              
            ButtonSimulator.setPreferredSize(new java.awt.Dimension(90, 35));
              ButtonSimulator.setMaximumSize(new java.awt.Dimension(180, 35));
              ButtonSimulator.setName("buttonSimulator");
              ButtonSimulator.setText("Simulator");
              ButtonSimulator.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                      SimulatorActionPerformed(evt);
                  }
              }
              );
              jToolBarTools.add(ButtonSimulator);
              
              
            ButtonSMV.setPreferredSize(new java.awt.Dimension(90, 35));
              ButtonSMV.setMaximumSize(new java.awt.Dimension(180, 35));
              ButtonSMV.setName("buttonSMV");
              ButtonSMV.setText("SMV");
              ButtonSMV.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                      SMVActionPerformed(evt);
                  }
              }
              );
              jToolBarTools.add(ButtonSMV);
              
              
            getContentPane().add(jToolBarTools, java.awt.BorderLayout.NORTH);
            
            
            PanelStatus.setLayout(new java.awt.GridLayout(1, 1, 20, 0));
            PanelStatus.setPreferredSize(new java.awt.Dimension(400, 20));
            PanelStatus.setName("panelStatus");
            PanelStatus.setMinimumSize(new java.awt.Dimension(200, 20));
            
            Status.setName("statusLine");
              Status.setText("StatusLine");
              PanelStatus.add(Status);
              
              
            getContentPane().add(PanelStatus, java.awt.BorderLayout.SOUTH);
            
            
            
            getContentPane().add(jSeparator1, java.awt.BorderLayout.NORTH);
            
            setJMenuBar(jMenuBar);
            
        }//GEN-END:initComponents

/**********************************************************************************
 *
 *      Some ActionListeners
 *
 **********************************************************************************/
        
  private void SMVActionPerformed(java.awt.event.ActionEvent evt) {
      SnotOptionPane.showMessageDialog(null, "SMV is not yet implemented!", 
                                        "Error", JOptionPane.ERROR_MESSAGE); 
  }

  private void SimulatorActionPerformed(java.awt.event.ActionEvent evt) {
      SnotOptionPane.showMessageDialog(null, "Simulator is not yet implemented!", 
                                        "Error", JOptionPane.ERROR_MESSAGE); 
  }

  private void CheckSFCActionPerformed(java.awt.event.ActionEvent evt) {
      SnotOptionPane.showMessageDialog(null, "Check is not yet implemented!", 
                                        "Error", JOptionPane.ERROR_MESSAGE); 
  }

  private void EditorActionPerformed(java.awt.event.ActionEvent evt) {
      NewSFCActionPerformed(null);
//      SnotOptionPane.showMessageDialog(null, "Editor call is not yet implemented!", 
//                                        "Error", JOptionPane.ERROR_MESSAGE); 
  }

  private void ExitSnotActionPerformed(java.awt.event.ActionEvent evt) {
        prepareForExitSnot(true);
  }

  /**
   * The ExportSFC function:
   * Exports a single SFC. It catches events from the ToolBarButtons and Menu. 
   * @param evt the ActionEvent
   * @see #Project.saveSFC
   */
  
  private void ExportSFCActionPerformed(java.awt.event.ActionEvent evt) {
      // check for empty projects vector
      if (session.noProjects()) {
          SnotOptionPane.showMessageDialog(null, "Export SFC error:\nThere are no SFCs in the current session!",
                                           "Error", JOptionPane.ERROR_MESSAGE);
          return;
      }
      
      // initialize FileChooser
      JFileChooser chooser = new JFileChooser();
      chooser.setFileFilter(new SnotFileFilter("sfc","Blubb"));
      chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);
      chooser.setApproveButtonToolTipText("Export SFC");
      chooser.setDialogTitle("Export SFC");
      
      // set prefered output path and filename
      if (session.getProject(activeProject).fileName != "") {
          File output = new File(session.getProject(activeProject).fileName);
          chooser.setCurrentDirectory(output);
          chooser.setSelectedFile(output);
      }
      else if (session.fileName != "")
          chooser.setCurrentDirectory(new File(session.fileName));
            
      // finaly display FileChooser
      int result = chooser.showDialog(null, "Export");
      if (result == JFileChooser.APPROVE_OPTION) {
         System.out.print("\nExport SFC: SFC would be exported as \""+chooser.getSelectedFile()+"\"");
         try {
            session.getProject(activeProject).saveSFC(chooser.getSelectedFile());
         }
         catch (Exception ex) {
             SnotOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
         }
      }
  }

  /**
   * The ImportSFC function:
   * Imports a single SFC. It catches events from the ToolBarButtons and Menu. 
   * @param evt the ActionEvent
   * @see #Project.openSFC
   */

  private void ImportSFCActionPerformed(java.awt.event.ActionEvent evt) {
      // check for valid session
      if (session == null) {
           SnotOptionPane.showMessageDialog(null, "Importing a new SFC failed!\nCannot import a SFC without an active session.\nPlease open or create a new session first!", 
                                            "Error", JOptionPane.ERROR_MESSAGE);
           return;
      }

      // initializing FileChooser
      JFileChooser chooser = new JFileChooser();
      chooser.setFileFilter(new SnotFileFilter("sfc","Blubb"));
      chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);
      chooser.setApproveButtonToolTipText("Import SFC");
      chooser.setDialogTitle("Import SFC");
      
      // set prefered Directory
      if (session.fileName != "")
          chooser.setCurrentDirectory(new File(session.fileName));
      
      // show FileChooser
      int result = chooser.showDialog(null, "Import");
      if (result == JFileChooser.APPROVE_OPTION) {
          try {
              session.addProject(Project.openSFC(chooser.getSelectedFile()));
          }
          catch (Exception ex) {
               SnotOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
          }
      }
  }

  /**
   * The NewSFC function:
   * Opens a new Project and adds it to the current session.
   * This function catches events from the ToolBarButtons and Menu.
   * @param evt the ActionEvent
   * @see #Session.addProject
   */
  
  private void NewSFCActionPerformed(java.awt.event.ActionEvent evt) {
      Editor editor = null;
      // check for valid session
      if (session == null) {
           SnotOptionPane.showMessageDialog(null, "Creating a new SFC failed!\nCannot load a SFC without an active session.\nPlease open or create a new session first!", 
                                            "Error", JOptionPane.ERROR_MESSAGE);
           return;
      }
           
      // add new Project to session
      try {
          session.addProject(new Project());
      }
      catch (Exception ex) {
           SnotOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
      }
      
      // launch Editor with new SFC
      activeProject = session.getIndexOfLastProject();
      try {
          editor = new Editor(session.getProject(activeProject).getSFC());
          editor.setLocation(250, 250);
          editor.show();
      }
      catch (Exception ex) {
           SnotOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
           return;
      }
      
      // set environmental parameters
      session.has_changed = true;
      session.getProject(activeProject).setEditor(editor);
  }

  private void CloseSessionActionPerformed(java.awt.event.ActionEvent evt) {
      prepareForExitSnot(false);
      if (!ready_to_exit)
          return;
      closeSession();
  }

  private void SaveSessionActionPerformed(java.awt.event.ActionEvent evt) {
      ready_to_exit = true;  // global exit state
      
      if (session.fileName!="")
            session.save();
      else
          SaveAsSessionActionPerformed(null);
  }

  private void OpenSessionActionPerformed(java.awt.event.ActionEvent evt) {
      int response;
      File file = null;
      ready_to_exit = true;  // just in case ...
      
      // check for active session
      if (session != null) {
          if (session.has_changed) {
              response = SnotOptionPane.showConfirmDialog(null, "There already is an active unsaved session!\n Without saving the changes will be lost!\n\nDo you want to save the changes before opening a new session?\n",
                                            "Alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
          }
          else if (session.is_saved) {
              response = SnotOptionPane.showConfirmDialog(null, "There already is an active session!\nOpening a new once will close the current session.\n\n Do you wish to proceed?\n",
                                            "Alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
          }
          else {
              response = SnotOptionPane.showConfirmDialog(null, "The active session is not saved!\n Without saving its contents will be lost!\n\nDo you want to save it before opening a new session?\n",
                                            "Alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
          }
              
          switch (response) {
              case JOptionPane.YES_OPTION: SaveSessionActionPerformed(null); break;
              case JOptionPane.NO_OPTION: break;
              case JOptionPane.CANCEL_OPTION:
              case JOptionPane.CLOSED_OPTION: return;
          }

          // check if SaveSessionActionPerformed was aborted
          if (!ready_to_exit)
              return;
             
          if (session.fileName!="")
              file = new File(session.fileName);
               
//          closeSession();  closing session as late as possible!! see below
      }

      JFileChooser chooser = new JFileChooser();
      chooser.setFileFilter(new SnotFileFilter("snot","Snot sessions"));
      chooser.setDialogTitle("Open session");
      if (file != null)
          chooser.setCurrentDirectory(file);
      
      int result = chooser.showOpenDialog(null);
      if (result == JFileChooser.APPROVE_OPTION) {
          closeSession();          
          try {
              session = openSession(chooser.getSelectedFile());
          }
          catch (Exception ex) {
              SnotOptionPane.showMessageDialog(null, ex.getMessage(),
                                            "Error", JOptionPane.WARNING_MESSAGE);
          }
      }
      if (session == null)
          disableSession(); // disable menues, buttons, ...
      else 
          enableSession();  // enable menues, buttons, ...
  }

  private void SaveAsSessionActionPerformed(java.awt.event.ActionEvent evt) {
      ready_to_exit = true; // setting global exit state
      
      JFileChooser chooser = new JFileChooser();
      chooser.setFileFilter(new SnotFileFilter("snot","Snot sessions"));
      chooser.setDialogTitle("Save session as");
      int result = chooser.showDialog(null, "Save as");
      if (result == JFileChooser.APPROVE_OPTION) {
         System.out.print("\n Save Session As: Session would be saved as \""+chooser.getSelectedFile()+"\"");
//          saveSession(chooser.getSelectedFile());
         session.is_saved = true;   // ... ??? what ever!
      }
      else 
          ready_to_exit = false;
  }
			  
  private void AboutActionPerformed(java.awt.event.ActionEvent evt) {
      SnotOptionPane.showMessageDialog(null, "Snot\n Still in experimental phase 0.1\n Please hang on for later versions ...", 
                                        "About", JOptionPane.INFORMATION_MESSAGE); 
  }

					  
	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
            prepareForExitSnot(true);
	}//GEN-LAST:event_exitForm
	
/*******************************************************************************
 *
 *      Some selfmade utilities   
 *
 *******************************************************************************/

    private void disableSession() {
        // disable all relevant menus, buttons, ...
    }
        
    private void enableSession() {
        // enable all relevant menus, buttons, ...
    }
        
    private void closeSession() {
        // do not check whether the session is saved or changed!
        // just close it and clean up the environment!
        System.out.print("\n ... closing Session");
    }
    
    private Session openSession(File file) {
        // read session from file and load all environmental parameters and windows
        System.out.print("\n ... opening new session from file \""+file+"\"");
        return new Session();
    }
    

    private void prepareForExitSnot(boolean exit) {
        int result = JOptionPane.CANCEL_OPTION;
        ready_to_exit = true;

        if (session.has_changed) 
            result = SnotOptionPane.showConfirmDialog(null, "The session has changed!\n\nDo you want to save it?",
                                            "Alert!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        else if (!session.is_saved)  
            result = SnotOptionPane.showConfirmDialog(null, "The session is not saved!\n\nDo you want to save it now?",
                                            "Alert!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        else if (exit) 
                exitSnot();
            else 
                return;

        switch (result) {
            case JOptionPane.YES_OPTION: SaveSessionActionPerformed(null);
            case JOptionPane.NO_OPTION: if (exit && ready_to_exit) exitSnot(); break;
            case JOptionPane.CANCEL_OPTION:
            case JOptionPane.CLOSED_OPTION: ready_to_exit = false; break;
        }
    }
        

    private void exitSnot() {
        // function must terminate Snot!
        // collect all opened Frames/Windows and close em all!!! -> editor Windows need to be closed!!
        System.exit(0);
    }
        
        
        
        
	/**
         * The main function:
	 * @param args the command line arguments
	 */
	public static void main (String args[]) {
                
		new Gui (new Session()).show ();
	}
	
	
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JMenuBar jMenuBar;
        private javax.swing.JMenu FileMenu;
        private javax.swing.JMenuItem OpenSession;
        private javax.swing.JMenuItem SaveSession;
        private javax.swing.JMenuItem SaveAsSession;
        private javax.swing.JMenuItem CloseSession;
        private javax.swing.JSeparator jSeparator2;
        private javax.swing.JMenuItem NewSFC;
        private javax.swing.JMenuItem ImportSFC;
        private javax.swing.JMenuItem ExportSFC;
        private javax.swing.JSeparator jSeparator3;
        private javax.swing.JMenuItem ExitSnot;
        private javax.swing.JMenu Edit;
        private javax.swing.JMenu ToolsMenu;
        private javax.swing.JMenuItem Editor;
        private javax.swing.JMenuItem CheckSFC;
        private javax.swing.JMenuItem Simulator;
        private javax.swing.JMenuItem SMV;
        private javax.swing.JMenu View;
        private javax.swing.JMenu HelpMenu;
        private javax.swing.JMenuItem About;
        private javax.swing.JToolBar jToolBarTools;
        private javax.swing.JButton ButtonEditor;
        private javax.swing.JButton ButtonCheckSFC;
        private javax.swing.JButton ButtonSimulator;
        private javax.swing.JButton ButtonSMV;
        private javax.swing.JPanel PanelStatus;
        private javax.swing.JLabel Status;
        private javax.swing.JSeparator jSeparator1;
        // End of variables declaration//GEN-END:variables
	
}